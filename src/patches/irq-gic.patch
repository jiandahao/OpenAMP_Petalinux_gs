--- irq-gic.c	2017-05-04 17:04:19.888009490 +0800
+++ irq-gic.modifed.c	2017-05-05 10:30:58.067940378 +0800
@@ -276,7 +276,62 @@
 #else
 #define gic_set_wake	NULL
 #endif
+//=======================added to support AMP configuration================//
+#ifndef CONFIG_SMP
+struct ipi{
+	void (*handler)(void);
+};
+static struct ipi ipi_types[16];
+void handle_IPI(int ipinr,struct pt_regs *regs)
+{
+	struct pt_regs *old_regs = set_irq_regs(regs);
+	printk("handle irq:%d from remote\n",ipinr);
+	if(ipi_types[ipinr].handler){
+		irq_enter();
+		(*ipi_types[ipinr].handler)();
+		irq_exit();
+	}else
+		pr_debug("CPU%u: Unknown IPI message %x \n",ipinr);
+	set_irq_regs(old_regs);
+}
+
+int set_ipi_handler(int ipinr,void *handler,char *desc)
+{
+	if(ipi_types[ipinr].handler){
+		pr_crit("IPI handler 0x%x already registered to %pf\n",ipinr, ipi_types[ipinr].handler);
+		return -1;
+	}
+	printk("gic_data_dist_base(&gic_data[0])=0x%x,ipinr:%d\n",gic_data_dist_base(&gic_data[0]),ipinr);
+	ipi_types[ipinr].handler = handler;
+	return 0;
+}
+EXPORT_SYMBOL(set_ipi_handler);
+
+void clear_ipi_handler(int ipinr)
+{
+	ipi_types[ipinr].handler = NULL;
+}
+EXPORT_SYMBOL(clear_ipi_handler);
+
+void gic_raise_softirq_amp(unsigned long cpu,unsigned int irq)
+{
+	 unsigned long map = 0;
 
+	map |= 1 << cpu;
+
+	
+/*	 * Ensure that stores to Normal memory are visible to the
+	 * other CPUs before issuing the IPI.*/
+	 
+	dsb();
+	printk("write interrupts irq:%d to remote\n",irq);
+	/* this always happens on GIC0 */
+	writel_relaxed((map << 16) | irq,
+		gic_data_dist_base(&gic_data[0]) + GIC_DIST_SOFTINT);
+}
+EXPORT_SYMBOL(gic_raise_softirq_amp);
+//=======================================================================
+#endif
 static void __exception_irq_entry gic_handle_irq(struct pt_regs *regs)
 {
 	u32 irqstat, irqnr;
@@ -293,9 +348,9 @@
 		}
 		if (irqnr < 16) {
 			writel_relaxed(irqstat, cpu_base + GIC_CPU_EOI);
-#ifdef CONFIG_SMP
+
 			handle_IPI(irqnr, regs);
-#endif
+
 			continue;
 		}
 		break;
